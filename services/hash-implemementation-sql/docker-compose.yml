services:
  # PostgreSQL Database
  sql-postgres:
    image: postgres:15-alpine
    container_name: sql-postgres
    environment:
      - POSTGRES_DB=urlshortener
      - POSTGRES_USER=shortener
      - POSTGRES_PASSWORD=shortener123
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 1GB
        reservations:
          cpus: "0.75"
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shortener -d urlshortener"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - sql-network

  # Hash Service Instance 1
  sql-service-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sql-service-1
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=1
      - DB_HOST=sql-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      sql-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sql-network

  # Hash Service Instance 2
  sql-service-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sql-service-2
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=2
      - DB_HOST=sql-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      sql-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sql-network

  # Hash Service Instance 3
  sql-service-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sql-service-3
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=3
      - DB_HOST=sql-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      sql-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sql-network

  # Hash Service Instance 4
  sql-service-4:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sql-service-4
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=4
      - DB_HOST=sql-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      sql-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sql-network

  # Nginx Load Balancer
  sql-nginx-lb:
    image: nginx:alpine
    container_name: sql-nginx-lb
    ports:
      - "8100:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - sql-service-1
      - sql-service-2
      - sql-service-3
      - sql-service-4
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - sql-network

networks:
  sql-network:
    driver: bridge

volumes:
  postgres_data:
