#!/usr/bin/env node

/**
 * Complete authentication test script
 * Tests: registration, login, authentication status, protected routes, logout
 * Also saves session cookie for load testing
 * Usage: node test-auth.js
 */

const axios = require("axios");
const fs = require("fs");
const path = require("path");

const BASE_URL = "http://localhost:8131"; // Using nginx load balancer

// Create axios instance with proper cookie handling for Node.js
const client = axios.create({
  baseURL: BASE_URL,
  withCredentials: true,
  headers: {
    "Content-Type": "application/json",
  },
});

// Manual cookie storage for Node.js environment
let sessionCookie = null;

// Add request interceptor to include cookies
client.interceptors.request.use((config) => {
  if (sessionCookie) {
    config.headers.Cookie = sessionCookie;
  }
  return config;
});

// Add response interceptor to capture cookies
client.interceptors.response.use((response) => {
  const setCookieHeader = response.headers["set-cookie"];
  if (setCookieHeader && setCookieHeader.length > 0) {
    // Extract the session cookie
    const sessionCookieHeader = setCookieHeader.find((cookie) =>
      cookie.startsWith("sessionId=")
    );
    if (sessionCookieHeader) {
      sessionCookie = sessionCookieHeader.split(";")[0]; // Get just the sessionId=value part
      console.log("🍪 Session cookie captured for subsequent requests");
    }
  }
  return response;
});

// Save session cookie for load testing
function saveSessionCookieForLoadTest() {
  if (sessionCookie) {
    const cookieData = {
      cookie: sessionCookie,
      timestamp: new Date().toISOString(),
      note: "Generated by test-auth.js for load testing",
    };

    fs.writeFileSync(
      path.join(__dirname, "session-cookie.json"),
      JSON.stringify(cookieData, null, 2)
    );

    console.log(
      "💾 Session cookie saved to session-cookie.json for load testing"
    );
    console.log("🚀 You can now run: npm run load-test");
    return true;
  }
  return false;
}

async function testCompleteAuthFlow() {
  console.log("🚀 Testing Complete Authentication Flow\n");

  const timestamp = Date.now();
  const testUser = {
    username: `testuser_${timestamp}`,
    email: `test_${timestamp}@example.com`,
    password: "password123",
  };

  try {
    // Step 1: Register user
    console.log("1️⃣ Testing user registration...");
    const registerResponse = await client.post("/api/auth/register", testUser);
    console.log("✅ Registration successful:", registerResponse.data.message);
    console.log("   User ID:", registerResponse.data.user.id);
    console.log("   Username:", registerResponse.data.user.username);
    console.log("   Instance:", registerResponse.data.instanceId);
    console.log("");

    // Step 2: Test protected route (create short URL)
    console.log("2️⃣ Testing protected route (URL shortening)...");
    const shortenResponse = await client.post("/api/shorten", {
      longUrl: "https://example.com/test-authenticated-url",
    });
    console.log("✅ URL shortened:", shortenResponse.data.shortUrl);
    console.log("   Instance:", shortenResponse.data.instanceId);
    console.log("");

    // Step 3: Save session cookie for load testing
    console.log("3️⃣ Saving session cookie for load testing...");
    const saved = saveSessionCookieForLoadTest();
    if (saved) {
      console.log("✅ Session cookie ready for Artillery load testing");
    } else {
      console.log("❌ No session cookie to save");
    }
    console.log("");

    console.log("🎉 Authentication test completed successfully!");
    console.log("📊 Ready for load testing with authenticated session!");
  } catch (error) {
    console.error("❌ Test failed:", error.response?.data || error.message);
    if (error.code === "ECONNREFUSED") {
      console.log(
        "\n💡 Note: Make sure the service is running with: npm run docker:restart-clean"
      );
    }
  }
}

// Check if service is running first
async function checkServiceHealth() {
  try {
    const response = await client.get("/health");
    console.log("✅ Service is running on", BASE_URL);
    console.log("");
    return true;
  } catch (error) {
    console.error("❌ Service is not running on", BASE_URL);
    console.error(
      "   Please start the service first with: npm run docker:restart-clean"
    );
    return false;
  }
}

function showUsageInstructions() {
  console.log("\n📋 Usage Instructions:");
  console.log("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
  console.log("🔧 1. Run this script to create authenticated session");
  console.log("📊 2. Run load test: npm run load-test");
  console.log(
    "🌐 3. Load test will use the saved session cookie automatically"
  );
  console.log("");
  console.log("💡 The session cookie is valid for 24 hours");
  console.log("🔄 Re-run this script to refresh the session if needed");
}

// Main execution
async function main() {
  console.log("🔍 Checking service health...");
  const isHealthy = await checkServiceHealth();

  if (isHealthy) {
    await testCompleteAuthFlow();
    showUsageInstructions();
  }
}

main().catch(console.error);
