services:
  # PostgreSQL Database (Main Database)
  redis-sql-auth-postgres:
    image: postgres:15-alpine
    container_name: redis-sql-auth-postgres
    environment:
      - POSTGRES_DB=urlshortener
      - POSTGRES_USER=shortener
      - POSTGRES_PASSWORD=shortener123
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5435:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 1GB
        reservations:
          cpus: "0.75"
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shortener -d urlshortener"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - redis-sql-auth-network

  # Redis Cache (LRU Cache) + Session Store
  redis-sql-auth-redis:
    image: redis:7-alpine
    container_name: redis-sql-auth-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6381:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - redis-sql-auth-network

  # URL Service Instance 1 (with Authentication)
  redis-sql-auth-service-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: redis-sql-auth-service-1
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=1
      # PostgreSQL Configuration
      - DB_HOST=redis-sql-auth-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
      # Redis Cache Configuration
      - REDIS_HOST=redis-sql-auth-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      # Redis Session Configuration
      - REDIS_SESSION_DB=1
      - SESSION_SECRET=redis-sql-auth-session-secret-change-in-production
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      redis-sql-auth-postgres:
        condition: service_healthy
      redis-sql-auth-redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - redis-sql-auth-network

  # URL Service Instance 2 (with Authentication)
  redis-sql-auth-service-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: redis-sql-auth-service-2
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=2
      # PostgreSQL Configuration
      - DB_HOST=redis-sql-auth-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
      # Redis Cache Configuration
      - REDIS_HOST=redis-sql-auth-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      # Redis Session Configuration
      - REDIS_SESSION_DB=1
      - SESSION_SECRET=redis-sql-auth-session-secret-change-in-production
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      redis-sql-auth-postgres:
        condition: service_healthy
      redis-sql-auth-redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - redis-sql-auth-network

  # URL Service Instance 3 (with Authentication)
  redis-sql-auth-service-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: redis-sql-auth-service-3
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=3
      # PostgreSQL Configuration
      - DB_HOST=redis-sql-auth-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
      # Redis Cache Configuration
      - REDIS_HOST=redis-sql-auth-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      # Redis Session Configuration
      - REDIS_SESSION_DB=1
      - SESSION_SECRET=redis-sql-auth-session-secret-change-in-production
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      redis-sql-auth-postgres:
        condition: service_healthy
      redis-sql-auth-redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - redis-sql-auth-network

  # URL Service Instance 4 (with Authentication)
  redis-sql-auth-service-4:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: redis-sql-auth-service-4
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=4
      # PostgreSQL Configuration
      - DB_HOST=redis-sql-auth-postgres
      - DB_PORT=5432
      - DB_NAME=urlshortener
      - DB_USER=shortener
      - DB_PASSWORD=shortener123
      # Redis Cache Configuration
      - REDIS_HOST=redis-sql-auth-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      # Redis Session Configuration
      - REDIS_SESSION_DB=1
      - SESSION_SECRET=redis-sql-auth-session-secret-change-in-production
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      redis-sql-auth-postgres:
        condition: service_healthy
      redis-sql-auth-redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - redis-sql-auth-network

  # Nginx Load Balancer
  redis-sql-auth-nginx:
    image: nginx:alpine
    container_name: redis-sql-auth-nginx
    ports:
      - "8131:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - redis-sql-auth-service-1
      - redis-sql-auth-service-2
      - redis-sql-auth-service-3
      - redis-sql-auth-service-4
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - redis-sql-auth-network

networks:
  redis-sql-auth-network:
    driver: bridge

volumes:
  postgres_data:
