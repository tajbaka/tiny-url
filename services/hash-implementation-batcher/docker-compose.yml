services:
  # Bucket Database (for pre-generated short URLs)
  batcher-bucket-postgres:
    image: postgres:15-alpine
    container_name: batcher-bucket-postgres
    environment:
      - POSTGRES_DB=short_urls_bucket
      - POSTGRES_USER=shortener
      - POSTGRES_PASSWORD=shortener123
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - bucket_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shortener -d short_urls_bucket"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - shortener-network

  # URLs List Database (for actual URL mappings)
  batcher-urls-postgres:
    image: postgres:15-alpine
    container_name: batcher-urls-postgres
    environment:
      - POSTGRES_DB=urls_list
      - POSTGRES_USER=shortener
      - POSTGRES_PASSWORD=shortener123
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    command:
      [
        "postgres",
        "-c",
        "max_connections=300",
        "-c",
        "shared_buffers=256MB",
        "-c",
        "effective_cache_size=1GB",
        "-c",
        "maintenance_work_mem=64MB",
        "-c",
        "checkpoint_completion_target=0.9",
        "-c",
        "wal_buffers=16MB",
        "-c",
        "default_statistics_target=100",
        "-c",
        "random_page_cost=1.1",
        "-c",
        "effective_io_concurrency=200",
      ]
    volumes:
      - urls_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.75"
          memory: 1GB
        reservations:
          cpus: "1.5"
          memory: 750MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shortener -d urls_list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - shortener-network

  # URL Shortener Service Instance 1
  batcher-service-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: batcher-service-1
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=1
      - BUCKET_DB_HOST=batcher-bucket-postgres
      - BUCKET_DB_PORT=5432
      - BUCKET_DB_NAME=short_urls_bucket
      - BUCKET_DB_USER=shortener
      - BUCKET_DB_PASSWORD=shortener123
      - URLS_DB_HOST=batcher-urls-postgres
      - URLS_DB_PORT=5432
      - URLS_DB_NAME=urls_list
      - URLS_DB_USER=shortener
      - URLS_DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      batcher-bucket-postgres:
        condition: service_healthy
      batcher-urls-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shortener-network

  # URL Shortener Service Instance 2
  batcher-service-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: batcher-service-2
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=2
      - BUCKET_DB_HOST=batcher-bucket-postgres
      - BUCKET_DB_PORT=5432
      - BUCKET_DB_NAME=short_urls_bucket
      - BUCKET_DB_USER=shortener
      - BUCKET_DB_PASSWORD=shortener123
      - URLS_DB_HOST=batcher-urls-postgres
      - URLS_DB_PORT=5432
      - URLS_DB_NAME=urls_list
      - URLS_DB_USER=shortener
      - URLS_DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      batcher-bucket-postgres:
        condition: service_healthy
      batcher-urls-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shortener-network

  # URL Shortener Service Instance 3
  batcher-service-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: batcher-service-3
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=3
      - BUCKET_DB_HOST=batcher-bucket-postgres
      - BUCKET_DB_PORT=5432
      - BUCKET_DB_NAME=short_urls_bucket
      - BUCKET_DB_USER=shortener
      - BUCKET_DB_PASSWORD=shortener123
      - URLS_DB_HOST=batcher-urls-postgres
      - URLS_DB_PORT=5432
      - URLS_DB_NAME=urls_list
      - URLS_DB_USER=shortener
      - URLS_DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      batcher-bucket-postgres:
        condition: service_healthy
      batcher-urls-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shortener-network

  # URL Shortener Service Instance 4
  batcher-service-4:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: batcher-service-4
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=4
      - BUCKET_DB_HOST=batcher-bucket-postgres
      - BUCKET_DB_PORT=5432
      - BUCKET_DB_NAME=short_urls_bucket
      - BUCKET_DB_USER=shortener
      - BUCKET_DB_PASSWORD=shortener123
      - URLS_DB_HOST=batcher-urls-postgres
      - URLS_DB_PORT=5432
      - URLS_DB_NAME=urls_list
      - URLS_DB_USER=shortener
      - URLS_DB_PASSWORD=shortener123
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    depends_on:
      batcher-bucket-postgres:
        condition: service_healthy
      batcher-urls-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shortener-network

  # Nginx Load Balancer
  batcher-nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: batcher-nginx
    ports:
      - "8110:80"
    depends_on:
      - batcher-service-1
      - batcher-service-2
      - batcher-service-3
      - batcher-service-4
    networks:
      - shortener-network
    restart: unless-stopped

networks:
  shortener-network:
    driver: bridge

volumes:
  bucket_postgres_data:
  urls_postgres_data:
