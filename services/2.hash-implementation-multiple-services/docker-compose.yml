services:
  # Hash Service Instance 1
  multi-service-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multi-service-1
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=1
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hash-lb-network

  # Hash Service Instance 2
  multi-service-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multi-service-2
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=2
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hash-lb-network

  # Hash Service Instance 3
  multi-service-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multi-service-3
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=3
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hash-lb-network

  # Hash Service Instance 4
  multi-service-4:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multi-service-4
    environment:
      - NODE_ENV=development
      - PORT=3000
      - INSTANCE_ID=4
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hash-lb-network

  # Nginx Load Balancer
  multi-nginx:
    image: nginx:alpine
    container_name: multi-nginx
    ports:
      - "8090:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - multi-service-1
      - multi-service-2
      - multi-service-3
      - multi-service-4
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/nginx-status",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hash-lb-network

networks:
  hash-lb-network:
    driver: bridge
